# Copyright 2015 The TensorFlow Authors. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ==============================================================================

"""A deep MNIST classifier using convolutional layers.
See extensive documentation at
https://www.tensorflow.org/get_started/mnist/pros
"""
# Disable linter warnings to maintain consistency with tutorial.
# pylint: disable=invalid-name
# pylint: disable=g-bad-import-order

from __future__ import absolute_import
from __future__ import division
from __future__ import print_function
from pathlib import Path
from PIL import Image


import os
import csv
import numpy
import random

import argparse
import sys

from tensorflow.examples.tutorials.mnist import input_data

import tensorflow as tf

FLAGS = None

def getLabels (string):
	trainlabels = []
	updatedlabels = []
	
	with open(string, 'r') as f:
		reader = csv.reader(f)
		for row in reader:
			x = int(row[1])
			trainlabels.append(x)
		

		for x in trainlabels:
			if x == 0:
				label = [1,0,0,0,0]
				updatedlabels.append(label)
			if x == 1:
				label = [0,1,0,0,0]
				updatedlabels.append(label)
			if x == 2:
				label = [0,0,1,0,0]
				updatedlabels.append(label)
			if x == 3:
				label = [0,0,0,1,0]
				updatedlabels.append(label)
			if x == 4:
				label = [0,0,0,0,1]
				updatedlabels.append(label)
		
		
				
	return (numpy.array(updatedlabels)) #This is a bad way of doing this. Takes up too much memory

def importData(): 
	train_images = []
	#train_labels = getLabels('/Users/kevalshah/Desktop/trainLabels.csv')
	train_labels = getLabels('/Volumes/FUNDUSX/trainingLabels2.csv')
	print ("got training labels")
	#path = r'/Users/kevalshah/Desktop/train'
	path = r'/Volumes/FUNDUSX/trainingImages2' 
	img_rows, img_cols = 100, 100
	
	pathlist = Path(path).glob('**/*.jpeg')
	hiddenfile = "."
	counter = 0
	counter2 = 0
	for path in pathlist:
		if str(path)[32] != ".":
			jpeg = Image.open(path) 
			img = jpeg.resize((img_rows,img_cols))
			x = numpy.array(img.getdata())
			x = x[:, 0]
			#print path
			#print numpy.shape(x)
			train_images.append(x)
			counter = counter + 1
			print(counter)
                # train should be a matrix of size (a,b)
                # where a is the number of examples, b is the total of pixels

                # pending questions:
                # 1. revisit how to extract RGB into one value
                # 2. reduce the per image data 
                #    http://effbot.org/imagingbook/image.htm#tag-Image.Image.getpixel
	print ("finished loading train")
	random.shuffle(train_images)
	print("shuffled train_images")
		
		
	test_images = []
	test_labels = getLabels('/Volumes/FUNDUSX/testingLabels2.csv')
	print ("got testing labels")
	path = r'/Volumes/FUNDUSX/testingImages2'
	
	pathlist2 = Path(path).glob('**/*.jpeg')
	
	
	for path in pathlist2:
		jpeg = Image.open(path)
		img = jpeg.resize((img_rows,img_cols))
		x = numpy.array(img.getdata())
		x = x[:,0]
		test_images.append(x)
		counter2 = counter2 + 1
		print (counter2)
    
	print ("finished loading test")
	random.shuffle(test_images)
	print ("shuffled test_images")
	
	return (numpy.array(train_images), train_labels, numpy.array(test_images), test_labels)
	
def deepnn(x):


  # grayscale -- it would be 3 for an RGB image, 4 for RGBA, etc.
  x_image = tf.reshape(x, [-1, 100, 100, 1]) 


  W_conv1 = weight_variable([5, 5, 1, 32]) 
  b_conv1 = bias_variable([32])
  h_conv1 = tf.nn.relu(conv2d(x_image, W_conv1) + b_conv1)

  # Pooling layer - downsamples by 2X.
  h_pool1 = max_pool_2x2(h_conv1)

  # Second convolutional layer -- maps 32 feature maps to 64.
  W_conv2 = weight_variable([5, 5, 32, 64])
  b_conv2 = bias_variable([64])
  h_conv2 = tf.nn.relu(conv2d(h_pool1, W_conv2) + b_conv2)

  # Second pooling layer.
  h_pool2 = max_pool_2x2(h_conv2)


  W_fc1 = weight_variable([25 * 25 * 64, 1024]) 
  b_fc1 = bias_variable([1024])

  h_pool2_flat = tf.reshape(h_pool2, [-1, 25*25*64]) 
  h_fc1 = tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1) + b_fc1)

  # Dropout - controls the complexity of the model, prevents co-adaptation of
  # features.
  keep_prob = tf.placeholder(tf.float32)
  h_fc1_drop = tf.nn.dropout(h_fc1, keep_prob)


  W_fc2 = weight_variable([1024, 5]) 
  b_fc2 = bias_variable([5]) 

  y_conv = tf.matmul(h_fc1_drop, W_fc2) + b_fc2
  return y_conv, keep_prob


def conv2d(x, W):
  """conv2d returns a 2d convolution layer with full stride."""
  return tf.nn.conv2d(x, W, strides=[1, 1, 1, 1], padding='SAME')


def max_pool_2x2(x):
  """max_pool_2x2 downsamples a feature map by 2X."""
  return tf.nn.max_pool(x, ksize=[1, 2, 2, 1],
                        strides=[1, 2, 2, 1], padding='SAME')


def weight_variable(shape):
  """weight_variable generates a weight variable of a given shape."""
  initial = tf.truncated_normal(shape, stddev=0.1)
  return tf.Variable(initial)


def bias_variable(shape):
  """bias_variable generates a bias variable of a given shape."""
  initial = tf.constant(0.1, shape=shape)
  return tf.Variable(initial)


def main(_):
  # Import data
  mnist = importData()

  # Create the model
  x = tf.placeholder(tf.float32, [None, 10000]) 

  # Define loss and optimizer
  y_ = tf.placeholder(tf.float32, [None, 5]) 
  
  y_conv, keep_prob = deepnn(x)
  

  cross_entropy = tf.reduce_mean(
      tf.nn.softmax_cross_entropy_with_logits(labels=y_, logits=y_conv))
  train_step = tf.train.AdamOptimizer(1e-4).minimize(cross_entropy) #GradientDescentOptimizer instead?
  correct_prediction = tf.equal(tf.argmax(y_conv, 1), tf.argmax(y_, 1))
  accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))
  
  next_start_index  = 0
  next_start_end = 0
  with tf.Session() as sess:
    sess.run(tf.global_variables_initializer())
    for i in range(20000): 
      if next_start_index <= 24064-50 
        next_start_end = 24064-1
      else:
        next_start_end = next_start_index + 50
      batch_train = mnist.train_images[next_start_index:next_start_end]
      batch_label = mnist.train_labels[next_start_index:next_start_end]
      if next_start_index <= 24064-50:
      	next_start_index = 0
      else:
      	next_start_index +=50
      if i % 100 == 0:
        train_accuracy = accuracy.eval(feed_dict={
            x: batch_train, y_: batch_label, keep_prob: 1.0})
        print('step %d, training accuracy %g' % (i, train_accuracy))
      train_step.run(feed_dict={x: batch_train, y_: batch_label, keep_prob: 0.5})

    print('test accuracy %g' % accuracy.eval(feed_dict={
        x: mnist.test_images, y_: mnist.test_labels, keep_prob: 1.0})) 

if __name__ == '__main__':
  parser = argparse.ArgumentParser()
  parser.add_argument('--data_dir', type=str,
                      default='/tmp/tensorflow/mnist/input_data',
                      help='Directory for storing input data')
  FLAGS, unparsed = parser.parse_known_args()
  tf.app.run(main=main, argv=[sys.argv[0]] + unparsed)
